import React, { useState } from "react";
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import {
    ColumnDef,
    flexRender,
    getCoreRowModel,
    getPaginationRowModel,
    useReactTable,
} from "@tanstack/react-table";
import { DataTablePagination } from "./data-table-pagination";

interface DataTableProps<TData, TValue> {
    columns: ColumnDef<TData, TValue>[];
    data: TData[];
}

export function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {
    const [selectedRowId, setSelectedRowId] = useState<string | null>(null);

    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
    });

    const handleCheckboxChange = (rowId: string) => {
        setSelectedRowId(rowId === selectedRowId ? null : rowId);
    };

    return (
        <div className="space-y-4">
            <div className="rounded-md border">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead style={{ position: "sticky", left: 0, zIndex: 1 }}>
                                <input
                                    type="checkbox"
                                    checked={selectedRowId !== null}
                                    onChange={() => {
                                        setSelectedRowId(null);
                                    }}
                                />
                            </TableHead>
                            <TableHead
                                style={{
                                    position: "sticky",
                                    left: "37px", // Adjust as needed
                                    zIndex: 1,
                                }}
                            >
                                Task
                            </TableHead>
                            {table.getHeaderGroups().map((headerGroup) => (
                                <React.Fragment key={headerGroup.id}>
                                    {headerGroup.headers.map((header, index) => (
                                        <TableHead
                                            key={header.id}
                                            style={{
                                                position: index < 3 ? "sticky" : "static",
                                                left: index < 3 ? `${index * 100 + 100}px` : "auto",
                                                zIndex: index < 3 ? 2 : "auto",
                                            }}
                                        >
                                            {header.isPlaceholder
                                                ? null
                                                : flexRender(
                                                      header.column.columnDef.header,
                                                      header.getContext(),
                                                  )}
                                        </TableHead>
                                    ))}
                                </React.Fragment>
                            ))}
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {table.getRowModel().rows?.length ? (
                            table.getRowModel().rows.map((row) => (
                                <TableRow
                                    key={row.id}
                                    data-state={row.id === selectedRowId ? "selected" : undefined}
                                    onMouseEnter={() => {}}
                                    onMouseLeave={() => {}}
                                >
                                    <TableCell style={{ position: "sticky", left: 0, zIndex: 1 }}>
                                        <input
                                            type="checkbox"
                                            checked={row.id === selectedRowId}
                                            onChange={() => handleCheckboxChange(row.id)}
                                        />
                                    </TableCell>
                                    
                                    {row.getVisibleCells().map((cell, index) => (
                                        <TableCell
                                            key={cell.id}
                                            style={{
                                                position: index < 3 ? "sticky" : "static",
                                                left: index < 3 ? `${index * 100 + 100}px` : "auto",
                                                zIndex: index < 3 ? 2 : "auto",
                                            }}
                                        >
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </TableCell>
                                    ))}
                                </TableRow>
                            ))
                        ) : (
                            <TableRow>
                                <TableCell colSpan={columns.length} className="h-24 text-center">
                                    No results.
                                </TableCell>
                            </TableRow>
                        )}
                    </TableBody>
                </Table>
            </div>
            <DataTablePagination table={table} />
        </div>
    );
}
